---
description: This rule provides comprehensive best practices and coding standards for developing applications using LangChain.js. It covers code organization, performance, security, testing, and deployment to ensure robust and efficient LLM applications.
globs: **/*.ts,**/*.tsx,**/*.js,**/*.jsx
alwaysApply: false
---
# LangChain Best Practices and Coding Standards

- **Monitor and Evaluate LLM applications**: Utilize tools like LangSmith for monitoring application performance, including logging traces, analyzing latency, and evaluating LLM outputs against predefined metrics. This helps identify bottlenecks and ensures the application meets quality standards. Enable tracing by setting environment variables:
	`export LANGCHAIN_TRACING_V2="true"`
	`export LANGCHAIN_API_KEY="..."`

- **Implement Stateful Agents**: Use LangGraph to build stateful agents, crucial for applications like chatbots where remembering past interactions enhances user experience. Model interactions as a graph with nodes (states) and edges (transitions).

- **Maintain High Code Quality**: Enforce strict code quality through regular testing, ESLint, and Prettier for consistent code formatting and linting.

- **Comprehensive Documentation**: Ensure all components and their interactions are well-documented for maintainability and scalability.

- **Use LangChain Expression Language (LCEL)**: Employ LCEL for composing chains in a declarative way, supporting production deployment without code changes.

- **Explore Trade-offs in Deployment**: Choose between using external LLM providers or self-hosting open-source models based on cost, latency, and privacy considerations.

- **Secure Coding Practices**: Read up on our Security best practices to make sure you're developing safely with LangChain.

## 1. Code Organization and Structure

### 1.1 Directory Structure Best Practices

Adopting a consistent and well-structured directory layout improves project maintainability and collaboration.  Here's a recommended structure:


my-langchain-app/
├── src/
│   ├── chains/
│   │   ├── my-custom-chain.ts       # Custom chains
│   │   └── ...
│   ├── prompts/
│   │   ├── my-prompt-template.ts  # Reusable prompt templates
│   │   └── ...
│   ├── agents/
│   │   ├── smart-agent.ts        # Agent definitions
│   │   └── ...
│   ├── tools/
│   │   ├── search-tool.ts         # Custom tools
│   │   └── ...
│   ├── models/
│   │   ├── llm.ts               # LLM initialization
│   │   └── ...
│   ├── memory/
│   │   ├── conversation-memory.ts  # Memory management
│   │   └── ...
│   ├── utils/
│   │   ├── api-client.ts           # Utility functions
│   │   └── ...
│   ├── index.ts                  # Entry point/ Exports
│   └── types.ts                  # Shared Types and Interfaces
├── tests/
│   ├── chains/
│   │   ├── my-custom-chain.test.ts
│   │   └── ...
│   └── ...
├── .env                         # Environment variables
├── package.json                  # Project dependencies
├── tsconfig.json                 # TypeScript configuration
└── README.md                     # Project documentation


*   **src/**: Contains the application's source code.
    *   **chains/**:  Houses custom chain implementations. Each chain should reside in its own file.
    *   **prompts/**: Stores reusable prompt templates.  Use descriptive names for easy identification.
    *   **agents/**: Defines agents that orchestrate LLM interactions and tool usage.
    *   **tools/**:  Contains custom tools for agents.  Follow a consistent interface for tool definitions.
    *   **models/**: Initializes and configures the LLMs (e.g., OpenAI, Hugging Face) used in the application.  Centralize model configuration in this directory.
    *   **memory/**: Implements memory management for maintaining conversation history and context.
    *   **utils/**:  Includes utility functions and helper modules.
    *   **index.ts**: Serves as the main entry point, exporting modules for external consumption.
    *   **types.ts**: Defines shared types and interfaces used throughout the application.
*   **tests/**:  Contains unit, integration, and end-to-end tests. Mirror the `src` directory structure for corresponding tests.
*   **.env**: Stores environment variables (API keys, database credentials).
*   **package.json**: Defines project dependencies and scripts.
*   **tsconfig.json**: Configures TypeScript compilation options.
*   **README.md**: Provides project documentation and setup instructions.

### 1.2 File Naming Conventions

*   Use descriptive and consistent filenames.
*   Follow the `camelCase` convention for variable and function names.
*   Use `PascalCase` for class and interface names.
*   Append `.ts` or `.tsx` extension for TypeScript files and `.js` or `.jsx` for JavaScript files, respectively.
*   Test files should follow the pattern `[module-name].test.ts`.

    Example:

    *   `api-client.ts`
    *   `my-custom-chain.ts`
    *   `my-custom-chain.test.ts`
    *   `PromptTemplate.ts`

### 1.3 Module Organization Best Practices

  typescript
  // chains/index.ts
  export * from './conversationalChain';
  export * from './summarizationChain';

  // Usage:
  import { ConversationalChain, SummarizationChain } from '@/chains';

*   **Encapsulation**: Keep modules focused and responsible for a single concern.
*   **Separation of Concerns**: Distribute responsibilities across distinct modules to improve maintainability and testability.
*   **Loose Coupling**:  Minimize dependencies between modules.  Use interfaces and abstract classes to define contracts between modules.
*   **Explicit Exports**: Only export symbols intended for external use.
*   **Use index.ts for Re-exporting**: Use index.ts files in directories to re-export modules and simplify imports.

### 1.4 Component Architecture Recommendations

  typescript
  // Define an interface for a Tool
  interface ToolInterface {
      name: string;
      description: string;
      execute(input: string): Promise<string>;
  }

  // Implement the interface in a specific Tool
  class SearchTool implements ToolInterface {
      name = 'search';
      description = 'Useful for searching the internet.';
      async execute(input: string): Promise<string> {
          // Implementation
      }
  }

*   **Modular Components**:  Decompose the application into reusable, independent components.  This enhances code organization and facilitates testing.
*   **Stateless Components**: Favor stateless components to reduce complexity. If state is required, manage it using dedicated state management solutions.
*   **Composition**:  Compose complex components from simpler, reusable components.
*   **Clear Interfaces**:  Define clear interfaces for components to promote interoperability.

### 1.5 Code Splitting Strategies

  typescript
  async function loadLargeModule() {
      const largeModule = await import('./largeModule');
      largeModule.initialize();
  }

*   **Route-Based Splitting**:  Load code for specific routes or features only when needed.
*   **Component-Based Splitting**:  Defer loading of large or infrequently used components.
*   **Dynamic Imports**:  Use dynamic imports (`import()`) to load modules on demand.

## 2. Common Patterns and Anti-patterns

### 2.1 Design Patterns Specific to LangChain

  typescript
  // Factory Pattern for creating chains
  class ChainFactory {
      static createChain(type: 'conversational' | 'summarization', llm: LLM) {
          if (type === 'conversational') {
              return new ConversationalChain(llm);
          } else if (type === 'summarization') {
              return new SummarizationChain(llm);
          } else {
              throw new Error('Invalid chain type');
          }
      }
  }

  const chain = ChainFactory.createChain('conversational', new OpenAIChat());

*   **Chain of Responsibility**:  Use chains to process requests sequentially, allowing different handlers to process specific types of requests. This is core to how Langchain chains operate.  Define an abstract `Chain` class and concrete chain implementations.
*   **Factory Pattern**: Employ factories to create instances of chains, models, or tools. This simplifies object creation and promotes loose coupling.
*   **Strategy Pattern**:  Utilize different strategies for tasks such as prompt generation, text splitting, or memory management.  Define an interface for the strategy and concrete strategy implementations.

### 2.2 Recommended Approaches for Common Tasks

*   **Prompt Engineering**: Utilize prompt templates for dynamic prompt creation. Employ a structured approach for prompt versioning and management.
*   **Chain Building**:  Compose chains using `SequentialChain` or custom chain implementations to create complex workflows.
*   **Tool Usage**:  Define a consistent interface for tools.  Implement tools as separate modules and integrate them into agents.
*   **Memory Management**: Use `ConversationBufferMemory` or custom memory implementations to maintain conversation history.

### 2.3 Anti-patterns and Code Smells

*   **Overly Complex Chains**: Avoid creating chains that are too long or deeply nested. Decompose complex workflows into smaller, more manageable chains.
*   **Hardcoded Prompts**: Never hardcode prompts directly in the code.  Use prompt templates to make prompts configurable and reusable.
*   **Ignoring Error Handling**:  Always handle potential errors when interacting with LLMs or external APIs.
*   **Lack of Memory Management**:  Failing to manage conversation history can lead to performance issues and unexpected behavior.
*   **Not Using Asynchronous Operations**: LangChain operations should be done asynchronously using async/await to avoid blocking the event loop.

### 2.4 State Management Best Practices

*   **Centralized State**: Manage application state in a centralized location (e.g., using a state management library or a custom service).
*   **Immutable State**: Treat state as immutable to simplify debugging and improve predictability.
*   **Reactive Updates**:  Use reactive programming techniques (e.g., RxJS) to automatically update UI components when state changes.
*   **Minimize Global State**: Avoid using global variables to store state. Use dependency injection or other techniques to pass state to components.

### 2.5 Error Handling Patterns

  typescript
  async function processData() {
      try {
          const result = await fetchData();
          // Process result
      } catch (error) {
          console.error('Error processing data:', error);
          // Handle error (e.g., display error message to user)
      }
  }

*   **Try-Catch Blocks**: Use `try-catch` blocks to handle synchronous and asynchronous errors.
*   **Error Boundaries**:  Implement error boundaries to catch errors in components and prevent application crashes.
*   **Centralized Error Handling**:  Create a centralized error handling service to log errors, display error messages, and trigger appropriate actions.
*   **Specific Error Types**: Throw specific error types to make error handling more precise.

## 3. Performance Considerations

### 3.1 Optimization Techniques Specific to LangChain

*   **Caching**: Cache LLM responses to reduce API calls. Use a caching strategy that considers the prompt and other relevant parameters.
*   **Token Optimization**: Minimize the number of tokens sent to the LLM.  Use techniques like prompt compression and context summarization.
*   **Streaming**: Use streaming to display LLM responses incrementally, improving perceived performance.
*   **Model Selection**: Choose the most appropriate LLM for the task.  Use smaller, faster models for simple tasks and larger, more powerful models for complex tasks.
*   **Batch Processing**:  Process multiple requests in batches to reduce API overhead.

### 3.2 Memory Management Considerations

*   **Conversation History**:  Limit the size of the conversation history to avoid excessive memory usage.  Use techniques like summarization or pruning to reduce the history size.
*   **Object Pooling**:  Reuse objects to reduce the overhead of object creation and garbage collection.
*   **Weak References**:  Use weak references to avoid memory leaks when managing object relationships.

### 3.3 Rendering Optimization (If Applicable)

*   **Virtualization**:  Use virtualization techniques to render large lists or tables efficiently.
*   **Debouncing and Throttling**:  Use debouncing and throttling to limit the frequency of UI updates.
*   **Memoization**: Memoize computationally expensive functions to avoid redundant calculations.

### 3.4 Bundle Size Optimization

*   **Tree Shaking**:  Use tree shaking to remove unused code from the bundle.
*   **Code Splitting**:  Split the bundle into smaller chunks to reduce the initial load time.
*   **Minification**:  Minify the code to reduce the bundle size.
*   **Compression**:  Compress the bundle using gzip or Brotli to reduce the transfer size.

### 3.5 Lazy Loading

*   **Dynamic Imports**:  Use dynamic imports to load modules on demand.
*   **Intersection Observer**:  Use the Intersection Observer API to load components when they become visible in the viewport.

## 4. Security Best Practices

### 4.1 Common Vulnerabilities and Prevention

*   **Prompt Injection**: Carefully sanitize user inputs to prevent prompt injection attacks. Use techniques like input validation and prompt engineering to mitigate this risk.
*   **API Key Exposure**:  Never hardcode API keys in the code. Store API keys in environment variables or a secure configuration management system.
*   **Cross-Site Scripting (XSS)**:  Sanitize user-generated content to prevent XSS attacks.
*   **Server-Side Request Forgery (SSRF)**: Validate and sanitize URLs to prevent SSRF attacks.
*   **Denial of Service (DoS)**: Implement rate limiting and input validation to protect against DoS attacks.

### 4.2 Input Validation Best Practices

*   **Whitelist Validation**: Validate inputs against a whitelist of allowed values.
*   **Sanitization**: Sanitize inputs to remove or encode potentially harmful characters.
*   **Length Limits**:  Enforce length limits on inputs to prevent buffer overflows.
*   **Regular Expressions**: Use regular expressions to validate input formats.

### 4.3 Authentication and Authorization Patterns

*   **JSON Web Tokens (JWT)**: Use JWTs for authentication and authorization.
*   **Role-Based Access Control (RBAC)**: Implement RBAC to control access to resources based on user roles.
*   **OAuth 2.0**:  Use OAuth 2.0 for delegated authorization.
*   **Multi-Factor Authentication (MFA)**:  Implement MFA to enhance security.

### 4.4 Data Protection Strategies

*   **Encryption**: Encrypt sensitive data at rest and in transit.
*   **Data Masking**: Mask sensitive data to protect it from unauthorized access.
*   **Data Anonymization**: Anonymize data to protect user privacy.
*   **Data Retention Policies**:  Implement data retention policies to comply with privacy regulations.

### 4.5 Secure API Communication

*   **HTTPS**: Always use HTTPS for API communication.
*   **TLS**:  Use TLS 1.3 or higher for secure communication.
*   **API Key Rotation**:  Rotate API keys regularly to prevent unauthorized access.
*   **Rate Limiting**:  Implement rate limiting to protect against abuse.
*   **Input validation**: As mentioned above, all input to the API should be validated, including prompt data and any parameters.

## 5. Testing Approaches

### 5.1 Unit Testing Strategies

*   **Isolate Units**:  Isolate units of code for testing by using mocks and stubs.
*   **Test Driven Development (TDD)**:  Write tests before writing code to ensure that the code meets the requirements.
*   **Behavior Driven Development (BDD)**:  Write tests that describe the expected behavior of the code.
*   **Code Coverage**:  Use code coverage tools to measure the percentage of code covered by tests.
*   **Mock LLM Calls**: When unit testing, mock LLM calls so that tests run quickly and predictably.  Use a library like `jest.mock` or `sinon` to mock the `OpenAI` or other LLM client.

### 5.2 Integration Testing Approaches

*   **Test Interactions**:  Test the interactions between different modules or components.
*   **Real Dependencies**:  Use real dependencies for integration tests whenever possible.
*   **Database Tests**:  Test database interactions to ensure data integrity.
*   **API Tests**:  Test API endpoints to ensure that they are working correctly.

### 5.3 End-to-End Testing Recommendations

*   **Simulate User Interactions**: Simulate user interactions to test the application from end to end.
*   **Automated Browsers**:  Use automated browsers (e.g., Puppeteer, Playwright) to run end-to-end tests.
*   **Test Environments**:  Use dedicated test environments to avoid affecting production data.

### 5.4 Test Organization Best Practices

*   **Mirror Source Structure**:  Mirror the source code structure in the test directory.
*   **Descriptive Test Names**:  Use descriptive test names to make it easy to understand what each test is testing.
*   **Test Suites**:  Group related tests into test suites.
*   **Continuous Integration**:  Run tests automatically as part of the continuous integration process.

### 5.5 Mocking and Stubbing Techniques

*   **Mock Objects**: Create mock objects to replace real dependencies in tests.
*   **Stub Functions**:  Stub functions to control the behavior of dependencies.
*   **Mocking Libraries**: Use mocking libraries (e.g., Jest, Sinon) to simplify mocking and stubbing.

## 6. Common Pitfalls and Gotchas

### 6.1 Frequent Mistakes

*   **Not Understanding Token Limits**: Exceeding the token limit of the LLM.
*   **Incorrect Prompt Formatting**:  Using incorrect prompt formatting.
*   **Not Handling API Errors**:  Failing to handle API errors properly.
*   **Ignoring Asynchronous Operations**:  Blocking the event loop with synchronous operations.
*   **Lack of Monitoring**: Failing to monitor the application for performance issues and errors.

### 6.2 Edge Cases

*   **Empty Inputs**:  Handling empty or invalid inputs gracefully.
*   **Long Inputs**: Handling very long inputs without exceeding token limits.  Consider recursive summarization techniques for document ingestion.
*   **Unexpected API Responses**:  Handling unexpected API responses.
*   **LLM Hallucinations**:  Mitigating LLM hallucinations through prompt engineering and knowledge verification.

### 6.3 Version-Specific Issues

*   **API Changes**: Being aware of API changes in new versions of LangChain.js.
*   **Dependency Conflicts**:  Resolving dependency conflicts when upgrading LangChain.js.
*   **Deprecated Features**:  Migrating away from deprecated features.

### 6.4 Compatibility Concerns

*   **Node.js Versions**: Ensuring compatibility with supported Node.js versions.
*   **TypeScript Versions**:  Ensuring compatibility with supported TypeScript versions.
*   **Browser Compatibility**:  Ensuring compatibility with target browsers (if applicable).
*   **Third-Party Libraries**:  Ensuring compatibility with third-party libraries.

### 6.5 Debugging Strategies

*   **Logging**:  Use logging to track the execution flow and identify errors.
*   **Debuggers**:  Use debuggers to step through the code and inspect variables.
*   **Error Messages**:  Read error messages carefully to understand the cause of the error.
*   **Stack Traces**:  Use stack traces to identify the location of the error.
*   **LangSmith Tracing**: Utilize LangSmith to trace the application flow, visualize latency, and analyze token usage.

## 7. Tooling and Environment

### 7.1 Recommended Development Tools

*   **Visual Studio Code (VS Code)**:  A popular code editor with excellent TypeScript support.
*   **Node.js**:  A JavaScript runtime environment.
*   **npm or Yarn**:  Package managers for installing and managing dependencies.
*   **TypeScript**: A superset of JavaScript that adds static typing.
*   **ESLint**:  A linter for identifying and fixing code style issues.
*   **Prettier**:  A code formatter for automatically formatting code.
*   **Jest**: A testing framework.
*   **Playwright/Puppeteer**: End-to-End testing frameworks

### 7.2 Build Configuration Best Practices

*   **tsconfig.json**: Configure TypeScript compilation options to optimize code generation.
*   **webpack.config.js or vite.config.js**: Configure module bundling and optimization.
*   **.env files**: Store environment variables in `.env` files and use a library like `dotenv` to load them.

### 7.3 Linting and Formatting Recommendations

*   **ESLint**: Configure ESLint to enforce code style guidelines and identify potential errors.
*   **Prettier**: Configure Prettier to automatically format code according to the defined style rules.
*   **Editor Integration**: Integrate ESLint and Prettier with the code editor to automatically lint and format code on save.
*   **Husky**: Use Husky to run linters and formatters before committing code.

### 7.4 Deployment Best Practices

*   **Containerization**:  Use containerization (e.g., Docker) to create portable and reproducible deployment environments.
*   **Orchestration**:  Use container orchestration (e.g., Kubernetes) to manage and scale the application.
*   **Continuous Deployment**: Implement continuous deployment to automatically deploy code changes to production.
*   **Environment Variables**:  Configure environment variables for production deployment.
*   **Monitoring**: Monitor the application for performance issues and errors.
*   **Secrets Management**: Use a secrets management tool (e.g., HashiCorp Vault) to store and manage sensitive information.

### 7.5 CI/CD Integration Strategies

*   **Automated Builds**:  Configure CI/CD pipelines to automatically build and test the application on every commit.
*   **Automated Testing**:  Run unit, integration, and end-to-end tests as part of the CI/CD pipeline.
*   **Automated Deployment**:  Automate the deployment process to reduce manual effort and errors.
*   **Rollback Strategy**:  Implement a rollback strategy to quickly revert to a previous version in case of errors.

By adhering to these best practices, developers can create robust, efficient, and secure LangChain applications that deliver value to users.
