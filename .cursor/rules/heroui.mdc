---
description: This rule provides guidelines and best practices for developing applications using the HeroUI React component library, focusing on code quality, performance, and maintainability.
globs: **/*.{js,jsx,ts,tsx}
alwaysApply: False
---
# HeroUI Best Practices

This document outlines best practices and coding standards for developing applications using the HeroUI React component library. Following these guidelines will help ensure code quality, performance, and maintainability.

## 1. Code Organization and Structure

- **Directory Structure:**
    - Adopt a feature-based or component-based directory structure.
    - Group related components, hooks, and utilities within a dedicated directory.
    - Example:

      
      src/
      ├── components/
      │   ├── Button/
      │   │   ├── Button.tsx
      │   │   ├── Button.stories.tsx (if using Storybook)
      │   │   ├── Button.test.tsx (for unit tests)
      │   │   └── index.ts (exporting Button)
      │   ├── Input/
      │   │   └── ...
      │   └── ...
      ├── hooks/
      │   ├── useTheme.ts
      │   └── ...
      ├── utils/
      │   ├── api.ts
      │   └── ...
      ├── pages/
      │   ├── Home.tsx
      │   └── ...
      └── App.tsx
      

- **File Naming Conventions:**
    - Use PascalCase for component filenames (e.g., `Button.tsx`).
    - Use camelCase for hook filenames (e.g., `useTheme.ts`).
    - Use descriptive names that clearly indicate the file's purpose.

- **Module Organization:**
    - Export components, hooks, and utilities using named exports.
    - Create an `index.ts` file within each directory to re-export all members, simplifying imports.
    - Example:

      typescript
      // src/components/Button/index.ts
      export { Button } from './Button';
      

      typescript
      // Usage
      import { Button } from './components/Button';
      

- **Component Architecture:**
    - Favor composition over inheritance.
    - Create small, reusable components that perform a single task.
    - Utilize the `as` prop provided by HeroUI components for polymorphic behavior and customizing the underlying HTML element.

- **Code Splitting:**
    - Implement route-based code splitting using React.lazy and Suspense.
    - Consider component-level code splitting for large or infrequently used components.

## 2. Common Patterns and Anti-patterns

- **Design Patterns:**
    - **Compound Component:** When creating complex components, such as Tabs or Accordions, utilize the Compound Component pattern. This pattern involves a parent component that manages the state and context, and child components that consume the context to render their specific UI.
    - **Render Props / Function as Child:** Provide flexibility and customization options for your components by using render props (a prop that is a function) or the function-as-child pattern. This allows developers to inject custom rendering logic into your components.
    - **Higher-Order Components (HOCs):** While less common with functional components and hooks, HOCs can still be useful for cross-cutting concerns like authentication or data fetching. Consider using hooks as a more modern alternative.

- **Recommended Approaches:**
    - Leverage the fully-typed API of HeroUI to minimize errors and improve developer experience.
    - Customize themes using the HeroUI Tailwind CSS plugin for consistent styling.
    - Utilize the built-in accessibility features of HeroUI components to create inclusive user interfaces.

- **Anti-patterns:**
    - Avoid directly manipulating the DOM.
    - Avoid unnecessary re-renders.
    - Avoid complex state management logic within components.

- **State Management:**
    - Use React's built-in `useState` and `useContext` hooks for simple state management.
    - Consider using a state management library like Redux, Zustand, or Jotai for more complex applications.
    - Colocate state with the component that uses it whenever possible.

- **Error Handling:**
    - Use try-catch blocks to handle errors gracefully.
    - Implement error boundaries to prevent application crashes.
    - Provide informative error messages to the user.

## 3. Performance Considerations

- **Optimization Techniques:**
    - Use `React.memo` to prevent unnecessary re-renders of functional components.
    - Use the `useCallback` hook to memoize callback functions.
    - Use the `useMemo` hook to memoize expensive calculations.
    - Optimize images using tools like ImageOptim or TinyPNG.

- **Memory Management:**
    - Avoid memory leaks by properly cleaning up event listeners and timers.
    - Use the `useEffect` hook to manage side effects and cleanup resources.

- **Rendering Optimization:**
    - Virtualize long lists using libraries like `react-window` or `react-virtualized`.
    - Avoid unnecessary DOM manipulations.

- **Bundle Size Optimization:**
    - Use code splitting to reduce the initial bundle size.
    - Remove unused code using tree shaking.
    - Compress assets using gzip or Brotli.

- **Lazy Loading:**
    - Lazy load images and other resources that are not immediately visible.
    - Use the `IntersectionObserver` API to detect when elements are visible in the viewport.

## 4. Security Best Practices

- **Common Vulnerabilities:**
    - Cross-site scripting (XSS)
    - Cross-site request forgery (CSRF)
    - Injection attacks

- **Input Validation:**
    - Sanitize user input to prevent XSS attacks.
    - Validate user input on both the client and server side.

- **Authentication and Authorization:**
    - Use a secure authentication and authorization system.
    - Protect sensitive data using encryption.
    - Implement role-based access control.

- **Data Protection:**
    - Store sensitive data securely.
    - Use HTTPS to encrypt data in transit.
    - Protect against data breaches.

- **Secure API Communication:**
    - Use HTTPS for all API communication.
    - Validate API responses.
    - Protect against API abuse.

## 5. Testing Approaches

- **Unit Testing:**
    - Use a testing framework like Jest or Mocha.
    - Write unit tests for all components, hooks, and utilities.
    - Test component props, rendering output, and event handlers.

- **Integration Testing:**
    - Use a testing library like React Testing Library or Cypress.
    - Test the interaction between components.
    - Test the integration with APIs and other services.

- **End-to-End Testing:**
    - Use a testing framework like Cypress or Playwright.
    - Test the entire application flow.
    - Test the user interface and user experience.

- **Test Organization:**
    - Organize tests into separate files based on component or feature.
    - Use descriptive test names.
    - Follow the Arrange-Act-Assert pattern.

- **Mocking and Stubbing:**
    - Use mocking libraries like Jest's built-in mocking or `mock-apollo-client` to isolate units under test.
    - Mock API calls and other external dependencies.

## 6. Common Pitfalls and Gotchas

- **Frequent Mistakes:**
    - Incorrectly using the `as` prop.
    - Neglecting accessibility considerations.
    - Overriding default styles unnecessarily.
    - Failing to handle errors gracefully.

- **Edge Cases:**
    - Handling different screen sizes and orientations.
    - Supporting internationalization and localization.
    - Dealing with slow network connections.

- **Version-Specific Issues:**
    - Be aware of breaking changes between HeroUI versions.
    - Consult the HeroUI documentation for migration guides.

- **Compatibility Concerns:**
    - Ensure compatibility with other libraries and frameworks.
    - Test the application in different browsers and devices.

- **Debugging Strategies:**
    - Use the React Developer Tools to inspect component props and state.
    - Use browser developer tools to debug JavaScript code.
    - Use console logging to track the flow of execution.

## 7. Tooling and Environment

- **Recommended Development Tools:**
    - Visual Studio Code (VS Code) with the ESLint, Prettier, and TypeScript extensions.
    - Chrome or Firefox with the React Developer Tools extension.
    - Storybook for component development and testing.

- **Build Configuration:**
    - Use a build tool like Webpack, Parcel, or Rollup.
    - Configure the build tool to optimize the bundle size.

- **Linting and Formatting:**
    - Use ESLint and Prettier to enforce code style and prevent errors.
    - Configure ESLint with the recommended rules for React and TypeScript.
    - Use a consistent code style throughout the project.

- **Deployment:**
    - Deploy the application to a hosting platform like Netlify, Vercel, or AWS.
    - Configure the hosting platform to automatically deploy new versions of the application.

- **CI/CD Integration:**
    - Use a CI/CD tool like GitHub Actions, GitLab CI, or CircleCI.
    - Automate the build, test, and deployment process.
    - Run tests on every commit to ensure code quality.

## Additional Notes

- **Accessibility:** Always prioritize accessibility when developing with HeroUI. Utilize semantic HTML, provide alternative text for images, and ensure keyboard navigation is supported.
- **Dark Mode:** Take advantage of HeroUI's built-in dark mode support by adding the `dark` attribute to the `html` element.
- **Customization:** Leverage Tailwind Variants to customize HeroUI components while avoiding class conflicts.
- **Community Support:** Engage with the HeroUI community on GitHub for support and feedback.

By following these best practices, you can create high-quality, performant, and maintainable applications using the HeroUI React component library.