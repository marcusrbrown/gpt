name: Visual Regression Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    paths:
      - 'src/**'
      - 'tests/visual/**'
      - playwright-visual.config.ts
      - package.json
      - pnpm-lock.yaml
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  visual-tests:
    if: github.event_name != 'workflow_dispatch'
    name: Run Visual Tests
    timeout-minutes: 15
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0

      - name: Setup pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps chromium

      - name: Build application
        run: pnpm run build

      - name: Run visual tests
        run: pnpm run test:visual:ci
        env:
          CI: true
          PLAYWRIGHT_BASE_URL: http://localhost:5173

      - name: Upload visual test results
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: always()
        with:
          name: visual-test-results
          path: |
            test-results/visual-report/
            test-results/visual-results.json
            test-results/visual-artifacts/
          retention-days: 30

      - name: Upload visual diff images
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: failure()
        with:
          name: visual-diff-images
          path: |
            test-results/**/test-failed-*.png
            test-results/**/test-actual-*.png
            test-results/**/test-expected-*.png
          retention-days: 7

      - name: Comment PR with visual test results
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Check if visual results file exists
            const resultsPath = 'test-results/visual-results.json';
            if (!fs.existsSync(resultsPath)) {
              console.log('No visual test results found');
              return;
            }

            const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
            const failed = results.stats.failed || 0;
            const passed = results.stats.expected || 0;
            const total = failed + passed;

            let comment = `## 📸 Visual Regression Test Results\n\n`;

            if (failed === 0) {
              comment += `✅ **All ${total} visual tests passed!**\n\n`;
              comment += `No visual regressions detected in this PR.`;
            } else {
              comment += `❌ **${failed} out of ${total} visual tests failed**\n\n`;
              comment += `Visual regressions detected. Please review the uploaded artifacts.\n\n`;
              comment += `### Failed Tests:\n`;

              // Add failed test details if available
              if (results.suites) {
                const failedTests = [];
                results.suites.forEach(suite => {
                  suite.specs?.forEach(spec => {
                    spec.tests?.forEach(test => {
                      if (test.status === 'failed') {
                        failedTests.push(`- ${test.title}`);
                      }
                    });
                  });
                });

                if (failedTests.length > 0) {
                  comment += failedTests.slice(0, 10).join('\n');
                  if (failedTests.length > 10) {
                    comment += `\n... and ${failedTests.length - 10} more`;
                  }
                }
              }

              comment += `\n\n📋 [View detailed results](${context.payload.pull_request.html_url}/checks)`;
            }

            // Post comment
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Separate job for updating visual baselines (manual trigger only)
  update-baselines:
    if: github.event_name == 'workflow_dispatch'
    name: Update Visual Baselines
    timeout-minutes: 15
    runs-on: ubuntu-latest

    steps:
      - id: get-app-token
        name: Get Workflow Access Token
        uses: actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e # v2.0.6
        with:
          app-id: ${{ secrets.APPLICATION_ID }}
          private-key: ${{ secrets.APPLICATION_PRIVATE_KEY }}

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.head_ref }}
          token: ${{ steps.get-app-token.outputs.token }}

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0

      - name: Setup pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4

      - name: Install dependencies
        run: pnpm install

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps chromium

      - name: Build application
        run: pnpm run build

      - name: Update visual baselines
        run: pnpm run test:visual:ci --update-snapshots
        env:
          CI: true
          PLAYWRIGHT_BASE_URL: http://localhost:5173

      - id: setup-bot-user
        name: Setup bot user
        env:
          GH_TOKEN: ${{ steps.get-app-token.outputs.token }}
          GIT_USER_NAME: ${{ steps.get-app-token.outputs.app-slug }}[bot]
        run: |
          USER_ID=$(gh api "/users/${GIT_USER_NAME}" --jq .id)
          echo "USER_EMAIL=${USER_ID}+${GIT_USER_NAME}@users.noreply.github.com" >> $GITHUB_OUTPUT
          echo "USER_NAME=${GIT_USER_NAME}" >> $GITHUB_OUTPUT
          git lfs install

      # Commit changes to the branch when triggered from a ref other than main
      - name: Commit changes to HEAD
        uses: EndBug/add-and-commit@a94899bca583c204427a224a7af87c02f9b325d5 # v9.1.4
        if: github.ref != 'refs/heads/main'
        with:
          author_name: '${{ steps.setup-bot-user.outputs.USER_NAME }}'
          author_email: '${{ steps.setup-bot-user.outputs.USER_EMAIL }}'
          committer_name: '${{ steps.setup-bot-user.outputs.USER_NAME }}'
          committer_email: '${{ steps.setup-bot-user.outputs.USER_EMAIL }}'
          message: 'chore: update visual regression baselines [skip ci]'

      # Create a pull request when triggered from the main branch
      - name: Create pull request
        uses: peter-evans/create-pull-request@271a8d0340265f705b14b6d32b9829c1cb33d45e # v7.0.8
        if: github.ref == 'refs/heads/main'
        with:
          assignees: marcusrbrown
          author: '${{ steps.setup-bot-user.outputs.USER_NAME }} <${{ steps.setup-bot-user.outputs.USER_EMAIL }}>'
          body: |
            This is an automated pull request to update the visual regression baselines.
            Please review the changes and merge this pull request if you approve.

            > _This pull request was automatically created by [create-pull-request][1] ([#${{ github.run_number }}][2])._

            [1]: https://github.com/peter-evans/create-pull-request 'Create Pull Request action on GitHub'
            [2]: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} 'Workflow run on GitHub'
          branch: chore/update-visual-baselines
          commit-message: 'chore: update visual regression baselines [skip ci]'
          committer: '${{ steps.setup-bot-user.outputs.USER_NAME }} <${{ steps.setup-bot-user.outputs.USER_EMAIL }}>'
          sign-commits: true
          title: 'chore: update visual regression baselines'
          token: ${{ steps.get-app-token.outputs.token }}
