# GPT

> Research and development platform for creating LLM-powered AI agents and assistants with complete data sovereignty, supporting multiple AI platforms including Ollama, Anthropic, and Azure OpenAI Service.

The project combines modern AI frameworks with web technologies to create a flexible development environment for experimentation with LLM architectures and advanced AI interaction patterns. Built with TypeScript, React, and LangChain, it provides both a web interface and Jupyter notebook environment for agent development.

## Documentation

- [Main README](readme.md): Primary project documentation, tech stack overview, and getting started guide
- [Project Overview](docs/overview.md): Core mission, primary features, and data architecture requirements
- [Product Requirements Document](docs/prd.md): Comprehensive specification for the local-first GPT creation platform
- [Agent Development Guide](agent-development.md): Framework for developing AI agents, architecture patterns, and implementation guide
- [GPT AI Coding Instructions](.github/copilot-instructions.md): Architectural patterns, component guidelines, and development workflow for the project
- [Design System Migration Assessment](.ai/notes/design-system-migration-assessment.md): Migration strategy for unified GPT design system implementation

## Configuration

- [Package Configuration](package.json): Project dependencies, scripts, and metadata
- [Vite Configuration](vite.config.ts): Build tool configuration for development and production
- [TypeScript Configuration](tsconfig.json): TypeScript compiler settings and project structure
- [Tailwind Configuration](tailwind.config.ts): CSS framework configuration for styling
- [ESLint Configuration](eslint.config.ts): Code linting rules and formatting standards
- [Vitest Configuration](vitest.config.ts): Unit testing framework configuration and setup
- [Playwright Configuration](playwright.config.ts): End-to-end testing configuration for browser automation
- [Playwright Visual Testing Configuration](playwright-visual.config.ts): Visual regression testing configuration
- [Redocly Configuration](redocly.yaml): API documentation and OpenAPI specification configuration
- [Workspace Configuration](pnpm-workspace.yaml): PNPM workspace configuration
- [NPM Configuration](.npmrc): NPM registry and package management settings
- [Markdown Linting Configuration](.markdownlint-cli2.yaml): Markdown formatting and style rules
- [Design System Guidelines](.cursor/rules/design-system.mdc): Unified design system patterns and utility functions
- [Design System Architecture](.ai/design-system/01-design-system.mdc): Core design system architecture and token definitions
- [UI Design Patterns](.ai/design-system/02-ui-design-patterns.mdc): Standardized UI component patterns and usage guidelines
- [React Best Practices](.cursor/rules/react-best-practices.mdc): React development guidelines and patterns
- [TypeScript Best Practices](.cursor/rules/typescript-best-practices.mdc): TypeScript coding standards and type safety practices
- [HeroUI Guidelines](.cursor/rules/heroui.mdc): Component library usage patterns and best practices
- [LangGraph Guidelines](.cursor/rules/langgraph.mdc): LangGraph development patterns for stateful agents
- [OpenAI Best Practices](.cursor/rules/openai-best-practices.mdc): OpenAI API integration and usage guidelines
- [Zod Best Practices](.cursor/rules/zod-best-practices.mdc): Schema validation and type safety with Zod

## Testing Configuration

- [Visual Testing README](tests/visual/README.md): Visual regression testing setup and guidelines
- [Accessibility Tests](tests/accessibility/): Comprehensive accessibility testing suite with WCAG compliance
- [End-to-End Tests](tests/e2e/): Browser automation tests for user workflows
- [Unit Tests](src/test/): Component and utility function unit tests

## Notebooks

- [Agent Template](notebooks/templates/agent.ipynb): Template for creating new AI agents
- [Code Analyzer Agent](notebooks/agents/analysis/code-analyzer.ipynb): Agent for code analysis and security checking

## Source Code

- [Site Configuration](src/config/site.ts): Application configuration and external links
- [App Component](src/App.tsx): Main React application component
- [Component Library](src/components/): Reusable UI components including GPT editor and test pane
- [Context Providers](src/contexts/): React context for conversation, OpenAI, and storage management
- [Service Layer](src/services/): OpenAI service integration and local storage utilities

## Optional

- [License](license.md): MIT license terms and conditions
- [Workspace Configuration](pnpm-workspace.yaml): PNPM workspace configuration
- [Lock File](pnpm-lock.yaml): Dependency version lock file
- [TailwindCSS Best Practices](.cursor/rules/tailwindcss-best-practices.mdc): Advanced TailwindCSS patterns and utilities
- [Tailwind Guidelines](.cursor/rules/tailwind.mdc): TailwindCSS configuration and usage patterns
- [Vite Best Practices](.cursor/rules/vite-best-practices.mdc): Build optimization and Vite configuration guidelines
- [Vitest Best Practices](.cursor/rules/vitest-best-practices.mdc): Testing patterns and Vitest configuration
- [AI Coding Frameworks Guide](.ai/compass_artifact_wf-8c9e0619-8195-49a8-b0f5-adbbf15c99e3_text_markdown.md): Comprehensive whitepaper on building autonomous AI coding agents and frameworks
- [LangChain Best Practices](.cursor/rules/langchain.mdc): Guidelines for LangChain framework usage and patterns

## Development Plans

- [Form Components HeroUI Integration](.ai/plan/refactor-form-components-1.md): Migration plan for form components to use HeroUI patterns and design system tokens
- [Comprehensive Testing Framework](.ai/plan/feature-comprehensive-testing-framework-1.md): End-to-end testing framework with Playwright, visual regression, accessibility, and performance testing
- [Card Components Design System Integration](.ai/plan/refactor-card-components-1.md): Standardization of card components using design system utilities and HeroUI patterns
- [Typography System Migration](.ai/plan/refactor-typography-system-1.md): Migration to unified typography system with semantic tokens and responsive patterns
- [Animation and Interaction Standardization](.ai/plan/refactor-animations-interactions-1.md): Standardization of animations and interactions using design system utilities

## Technical Analysis

- [Test Coverage Analysis](.ai/analysis/test-coverage-analysis.md): Comprehensive analysis of current testing gaps and coverage improvements
- [Card Components Phase 1 Analysis](.ai/analysis/card-components-phase1-analysis.md): Initial assessment of card component migration requirements
- [Card Components Phase 2 Completion](.ai/analysis/card-components-phase2-completion.md): Final phase of card component standardization completion
- [Form Validation Patterns Audit](.ai/analysis/form-validation-patterns-audit.md): Analysis of form validation approaches and best practices
- [Migration Priority List](.ai/analysis/migration-priority-list.md): Prioritized roadmap for component and system migrations
- [Native HTML Elements Inventory](.ai/analysis/native-html-elements-inventory.md): Audit of HTML elements and accessibility compliance
- [Navbar Component Analysis](.ai/analysis/navbar-heroui-analysis.md): Navigation component migration to HeroUI patterns
- [Navbar CSS Mapping](.ai/analysis/navbar-css-mapping.md): CSS class mapping for navbar component refactoring
- [Navbar Spacing Analysis](.ai/analysis/navbar-spacing-analysis.md): Design system spacing token analysis for navigation
